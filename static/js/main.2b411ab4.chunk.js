(this.webpackJsonpvisualizer=this.webpackJsonpvisualizer||[]).push([[0],{24:function(e,t,r){e.exports={grid:"SearchGrid_grid__1Al05",Node:"SearchGrid_Node__37977",Description:"SearchGrid_Description__2oH-W"}},38:function(e,t,r){},39:function(e,t,r){},40:function(e,t,r){},41:function(e,t,r){},42:function(e,t,r){},55:function(e,t,r){"use strict";r.r(t);var i=r(1),s=r(0),a=r.n(s),n=r(21),o=r.n(n),h=(r(38),r(39),r(30)),c=r(17),l=(r(40),r(31)),u=r(4),d=r(12),g=r(10),b=r(13),f=r(7),p=r(20),j=r(19),m=function(e){Object(p.a)(r,e);var t=Object(j.a)(r);function r(){return Object(g.a)(this,r),t.apply(this,arguments)}return Object(b.a)(r,[{key:"changeColorToOrange",value:function(e){e.color="orange"}},{key:"changeColorToBlue",value:function(e){e.color="blue"}},{key:"dfsStep",value:function(e,t,r,i,s){var a=e.endNode,n=e.currentNode;if(r.push(n),n.x===a.x&&n.y===a.y)return e.endNode.color="pink",console.log("Node found"),[e,t,r,i,s+1];var o=[];o.push([n.x+1,n.y]),o.push([n.x-1,n.y]),o.push([n.x,n.y+1]),o.push([n.x,n.y-1]);for(var h=0;h<o.length;h++){var c=o[h];if(c[0]>=0&&c[0]<e.numberOfRows&&c[1]>=0&&c[1]<e.numberOfColumns&&-1===i.indexOf(c[0]*e.numberOfColumns+c[1])&&e.graph[c[0]][c[1]].weight!==1/0){var l=e.graph[c[0]][c[1]];l.parent=n,t.push(l),i.push(c[0]*e.numberOfColumns+c[1])}}return t.forEach(this.changeColorToOrange),r.forEach(this.changeColorToBlue),t.length>=1&&(e.currentNode=t.pop(),e.currentNode.color="green"),[e,t,r,i,s+1]}},{key:"bfsStep",value:function(e,t,r,i,s){var a=e.endNode,n=e.currentNode;if(r.push(n),n.x===a.x&&n.y===a.y)return e.endNode.color="pink",[e,t,r,i,s+1];var o=[];o.push([n.x+1,n.y]),o.push([n.x-1,n.y]),o.push([n.x,n.y+1]),o.push([n.x,n.y-1]);for(var h=0;h<o.length;h++){var c=o[h];if(c[0]>=0&&c[0]<e.numberOfRows&&c[1]>=0&&c[1]<e.numberOfColumns&&-1===i.indexOf(c[0]*e.numberOfColumns+c[1])&&e.graph[c[0]][c[1]].weight!==1/0){var l=e.graph[c[0]][c[1]];l.parent=n,t.push(l),i.push(c[0]*e.numberOfColumns+c[1])}}return t.forEach(this.changeColorToOrange),r.forEach(this.changeColorToBlue),t.length>=1&&(e.currentNode=t.shift(),e.currentNode.color="green"),[e,t,r,i,s+1]}},{key:"aStarStep",value:function(e,t,r,i,s){var a=e.endNode,n=e.currentNode,o=1;if(t.size()&&(o=t.peek()[2]),r.push(n),n.x===a.x&&n.y===a.y)return e.endNode.color="pink",[e,t,r,i,s+1];var h=[];h.push([n.x+1,n.y]),h.push([n.x-1,n.y]),h.push([n.x,n.y+1]),h.push([n.x,n.y-1]);for(var c=0;c<h.length;c++){var l=h[c];if(l[0]>=0&&l[0]<e.numberOfRows&&l[1]>=0&&l[1]<e.numberOfColumns&&-1===i.indexOf(l[0]*e.numberOfColumns+l[1])&&e.graph[l[0]][l[1]].weight!==1/0){var u=e.graph[l[0]][l[1]];u.parent=n;var d=Math.abs(u.x-a.x)+Math.abs(u.y-a.y);t.push([u,o+u.weight+d,o+u.weight]),i.push(l[0]*e.numberOfColumns+l[1])}}return t.forEachNode(this.changeColorToOrange),r.forEach(this.changeColorToBlue),t.size()&&(e.currentNode=t.pop()[0],e.currentNode.color="green"),[e,t,r,i,s+1]}},{key:"dijkstraStep",value:function(e,t,r,i,s){var a=e.endNode,n=e.currentNode,o=1;if(t.size()&&(o=t.peek()[1]),r.push(n),n.x===a.x&&n.y===a.y)return e.endNode.color="pink",[e,t,r,i,s+1];var h=[];h.push([n.x+1,n.y]),h.push([n.x-1,n.y]),h.push([n.x,n.y+1]),h.push([n.x,n.y-1]);for(var c=0;c<h.length;c++){var l=h[c];if(l[0]>=0&&l[0]<e.numberOfRows&&l[1]>=0&&l[1]<e.numberOfColumns&&-1===i.indexOf(l[0]*e.numberOfColumns+l[1])&&e.graph[l[0]][l[1]].weight!==1/0){var u=e.graph[l[0]][l[1]];u.parent=n,t.push([u,o+u.weight]),i.push(l[0]*e.numberOfColumns+l[1])}}return t.forEachNode(this.changeColorToOrange),r.forEach(this.changeColorToBlue),t.size()&&(e.currentNode=t.pop()[0],e.currentNode.color="green"),[e,t,r,i,s+1]}}]),r}(s.Component),v=function(){function e(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"white";Object(g.a)(this,e),this.x=t,this.y=r,this.color=i,this.parent=null,this.weight=1}return Object(b.a)(e,[{key:"getX",value:function(){return this.x}},{key:"getY",value:function(){return this.y}},{key:"getColor",value:function(){return this.color}},{key:"getParent",value:function(){return this.parent}},{key:"setColor",value:function(e){this.color=e}},{key:"setParent",value:function(e){this.parent=e}}]),e}(),O=function(e){Object(p.a)(r,e);var t=Object(j.a)(r);function r(e){var i;Object(g.a)(this,r),(i=t.call(this,e)).state={numberOfRows:20,numberOfColumns:45,graph:[[]],startNode:new v(0,0,"yellow"),currentNode:new v(0,0,"green"),endNode:new v(0,0,"red")};for(var s=[],a=0;a<i.state.numberOfRows;a++){for(var n=[],o=0;o<i.state.numberOfColumns;o++){var h=new v(a,o);n.push(h)}s.push(n)}return s[0][0].color="yellow",s[i.state.numberOfRows-1][i.state.numberOfColumns-1].color="red",i.state.graph=s,i.state.startNode=s[0][0],i.state.endNode=s[i.state.numberOfRows-1][i.state.numberOfColumns-1],i.update=i.update.bind(Object(f.a)(i)),i}return Object(b.a)(r,[{key:"update",value:function(e){console.log("UPDATING THE GRID"),this.setState(e)}}]),r}(s.Component),x=r(24),k=r.n(x),y=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(e,t){return e>t};Object(g.a)(this,e),this._heap=[],this._comparator=t}return Object(b.a)(e,[{key:"heap",value:function(){return this._heap}},{key:"size",value:function(){return this._heap.length}},{key:"isEmpty",value:function(){return 0===this._heap.length}},{key:"peek",value:function(){return this._heap.length>=1?this._heap[0]:void 0}},{key:"push",value:function(e){for(var t=!1,r=0;r<this._heap.length&&!t;r++)this._heap[r][1]>e[1]&&(this._heap.splice(r,0,e),t=!0);t||this._heap.splice(this._heap.length,0,e)}},{key:"pop",value:function(){return this._heap.length>0?this._heap.shift():void 0}},{key:"empty",value:function(){this._heap=[]}},{key:"forEachNode",value:function(e){for(var t=0;t<this.size();t++)e(this._heap[t][0])}}]),e}(),w=function(e){return"DFS"===e?"Depth-First Search or DFS is a classic Path-finding Algorithm. It does not guarantee a shortest path but it guarantees that if there exists a path from the starting node to the destination, it will find it. It uses a stack in its implementation and is very useful for tree-traversals (pre/in/post) where we need to go down one entire branch before switching to the different branch. The last node that is added, is explored first in this algorithm. Both BFS and DFS do not work for weighted graphs, so we assume that every node has the same weight and that is 1.":"Dijkstra"===e?"Dijkstra is a guaranteed path finder and it finds the path with the lowest cost. A major difference between BFS/DFS and Dijkstra is that Dijkstra works for weighted paths where the cost of all nodes is not the same. Dijkstra's algorithm is named after Edsger W. Dijkstra. Using a Priority Queue in its implementation, we can find the lowest cost path from one node to all the other nodes, as a priority queue would search the nodes with the smallest cost first. In my implementation, I use min-heap to implement the priority queue.":"BFS"===e?"Breadth-First Search or BFS is a guaranteed shortest path-finder in a graph where all nodes cost the same to visit. It uses a queue in its implementation. We first visit and explore all the nodes at one level and then go upto the upper level. Since all nodes have the same cost, it can be proved using induction that all the nodes at each level have the same cost. This algorithm is used in Tree-traversals when we want to search an entire level of tree before going down to the second level. This traversal is known as level-order traversal.":'A* works like Dijkstra but uses the concept of a heuristics. A heuristics is a well-defined function which gives us an estimate of how bad/good visiting the current path might be. In this case, we use the "Manhattan Distance" between the current node and the destination to get an estimate of how good we are doing. The heuristics should be consistent for all the nodes and should not result in a decreased cost. (Manhattan distance fulfills both the conditions and is an extremely popular heuristics.'},S="gray",N="lightgray",T="black",C="white",D=function(e){Object(p.a)(r,e);var t=Object(j.a)(r);function r(e){var i;return Object(g.a)(this,r),(i=t.call(this,e)).state={algorithm:"Dijkstra",searching:!1,arrayOfNodes:[],visited:[],nodesTouched:[],pqOfNodes:new y,numberOfIterations:0},i.grid=new O,i.intervalID=void 0,i.searchAlgos=new m,i.description=w(i.state.algorithm),i.changeToDijkstra=i.changeToDijkstra.bind(Object(f.a)(i)),i.changeToBfs=i.changeToBfs.bind(Object(f.a)(i)),i.changeToDfs=i.changeToDfs.bind(Object(f.a)(i)),i.changeToAstar=i.changeToAstar.bind(Object(f.a)(i)),i.startSearch=i.startSearch.bind(Object(f.a)(i)),i.stopSearch=i.stopSearch.bind(Object(f.a)(i)),i.search=i.search.bind(Object(f.a)(i)),i.startInterval=i.startInterval.bind(Object(f.a)(i)),i.stopInterval=i.stopInterval.bind(Object(f.a)(i)),i.reset=i.reset.bind(Object(f.a)(i)),i.changeDescription=i.changeDescription.bind(Object(f.a)(i)),i.randomizeMaze=i.randomizeMaze.bind(Object(f.a)(i)),i.randomizeMaze(),i}return Object(b.a)(r,[{key:"reset",value:function(){this.setState({searching:!1,arrayOfNodes:[],visited:[],nodesTouched:[],pqOfNodes:new y,numberOfIterations:0});for(var e=0;e<this.grid.state.numberOfRows;e++)for(var t=0;t<this.grid.state.numberOfColumns;t++)1===this.grid.state.graph[e][t].weight?this.grid.state.graph[e][t].color=C:70===this.grid.state.graph[e][t].weight?(this.grid.state.graph[e][t].color=S,"BFS"!==this.state.algorithm&&"DFS"!==this.state.algorithm||(this.grid.state.graph[e][t].color=C)):30===this.grid.state.graph[e][t].weight?(this.grid.state.graph[e][t].color=N,"BFS"!==this.state.algorithm&&"DFS"!==this.state.algorithm||(this.grid.state.graph[e][t].color=C)):this.grid.state.graph[e][t].weight===1/0&&(this.grid.state.graph[e][t].color="black");this.grid.state.graph[0][0].color="yellow",this.grid.state.graph[0][0].weight=1,this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1].color="red",this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1].weight=1,this.grid.state.currentNode=this.grid.state.graph[0][0],this.grid.state.startNode=this.grid.state.graph[0][0],this.grid.state.endNode=this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1],this.grid.update(this.grid.state),this.changeDescription()}},{key:"randomizeMaze",value:function(){for(var e=0;e<this.grid.state.numberOfRows;e++)for(var t=0;t<this.grid.state.numberOfColumns;t++)if("Dijkstra"===this.state.algorithm||"A*"===this.state.algorithm){var r=Math.random();r>.9?(this.grid.state.graph[e][t].weight=1/0,this.grid.state.graph[e][t].color=T):r>.6?(this.grid.state.graph[e][t].weight=70,this.grid.state.graph[e][t].color=S):r>.3?(this.grid.state.graph[e][t].weight=30,this.grid.state.graph[e][t].color=N):this.grid.state.graph[e][t].weight=1}else{Math.random()>.8?(this.grid.state.graph[e][t].weight=1/0,this.grid.state.graph[e][t].color=T):this.grid.state.graph[e][t].weight=1}this.reset()}},{key:"changeDescription",value:function(){this.description=w(this.state.algorithm)}},{key:"changeToDijkstra",value:function(){var e=this;this.setState({algorithm:"Dijkstra"},(function(){return e.reset()}))}},{key:"changeToBfs",value:function(){var e=this;this.setState({algorithm:"BFS"},(function(){return e.reset()}))}},{key:"changeToDfs",value:function(){var e=this;this.setState({algorithm:"DFS"},(function(){return e.reset()}))}},{key:"changeToAstar",value:function(){var e=this;this.setState({algorithm:"A*"},(function(){return e.reset()}))}},{key:"tracePathFromStartToEnd",value:function(e){for(var t=e.endNode;t.x!==e.startNode.x||t.y!==e.startNode.y;)t.color="yellow",t=t.parent;return t.color="yellow",e}},{key:"search",value:function(){if(this.state.searching){var e,t,r,i,s,a,n;if("DFS"===this.state.algorithm){var o=this.searchAlgos.dfsStep(this.grid.state,this.state.arrayOfNodes,this.state.visited,this.state.nodesTouched,this.state.numberOfIterations),h=Object(d.a)(o,5);e=h[0],t=h[1],r=h[2],i=h[3],n=h[4],this.setState({arrayOfNodes:t,visited:r,nodesTouched:i,numberOfIterations:n})}else if("BFS"===this.state.algorithm){var c=this.searchAlgos.bfsStep(this.grid.state,this.state.arrayOfNodes,this.state.visited,this.state.nodesTouched,this.state.numberOfIterations),l=Object(d.a)(c,5);e=l[0],t=l[1],r=l[2],i=l[3],n=l[4],this.setState({arrayOfNodes:t,visited:r,nodesTouched:i,numberOfIterations:n})}else if("A*"===this.state.algorithm){var u=this.searchAlgos.aStarStep(this.grid.state,this.state.pqOfNodes,this.state.visited,this.state.nodesTouched,this.state.numberOfIterations),g=Object(d.a)(u,5);e=g[0],a=g[1],r=g[2],i=g[3],n=g[4],this.setState({pqOfNodes:a,visited:r,nodesTouched:i,numberOfIterations:n})}else if("Dijkstra"===this.state.algorithm){var b=this.searchAlgos.dijkstraStep(this.grid.state,this.state.pqOfNodes,this.state.visited,this.state.nodesTouched,this.state.numberOfIterations),f=Object(d.a)(b,5);e=f[0],a=f[1],r=f[2],i=f[3],n=f[4],this.setState({pqOfNodes:a,visited:r,nodesTouched:i,numberOfIterations:n})}e.currentNode.x===this.grid.state.endNode.x&&e.currentNode.y===this.grid.state.endNode.y?(s=!1,e=this.tracePathFromStartToEnd(e)):s=!0,this.setState({searching:s}),this.grid.update(e)}}},{key:"startInterval",value:function(){this.intervalID=window.setInterval(this.search,10)}},{key:"stopInterval",value:function(){window.clearInterval(this.intervalID)}},{key:"startSearch",value:function(){var e=this;this.setState({searching:!0},(function(){return e.startInterval()}))}},{key:"stopSearch",value:function(){var e=this;this.setState({searching:!1},(function(){return e.stopInterval()}))}},{key:"render",value:function(){var e,t,r=this;e=this.state.searching?Object(i.jsx)("button",{onClick:this.stopSearch,children:"Stop Search"}):Object(i.jsx)("button",{onClick:this.stopSearch,disabled:!0,children:"Stop Search"}),t=this.state.searching?Object(i.jsx)("button",{onClick:this.startSearch,disabled:!0,children:"Start Search"}):Object(i.jsx)("button",{onClick:this.startSearch,children:"Start Search"});var s=this.grid.state.graph.map((function(e){return e.map((function(e){return Object(i.jsx)("div",{style:{backgroundColor:e.color},className:k.a.Node},e.x*r.grid.state.numberOfColumns+e.y)}))}));return Object(i.jsxs)("div",{children:[Object(i.jsx)("button",{onClick:this.changeToDijkstra,disabled:"Dijkstra"===this.state.algorithm,children:"Dijkstra"}),Object(i.jsx)("button",{onClick:this.changeToBfs,disabled:"BFS"===this.state.algorithm,children:"BFS"}),Object(i.jsx)("button",{onClick:this.changeToDfs,disabled:"DFS"===this.state.algorithm,children:"DFS"}),Object(i.jsx)("button",{onClick:this.changeToAstar,disabled:"A*"===this.state.algorithm,children:"A*"}),Object(i.jsx)("button",{onClick:this.reset,children:"Reset The Board"}),Object(i.jsx)("button",{onClick:this.randomizeMaze,children:"Randomize The Maze"}),t,e,Object(i.jsx)("button",{children:Object(i.jsx)("a",{href:"https://github.com/satyam19946/visualizer",children:"Github link"})}),Object(i.jsx)("div",{className:k.a.Description,children:this.description}),Object(i.jsx)("br",{}),"Black Nodes cannot be passed and act as blockers. Darker nodes are high weighted and avoided while lighter are low weighted and preferred. 'Randomize The Maze' randomly assigns weight to each node in the grid.",Object(i.jsx)("br",{}),"Current Node = (",this.grid.state.currentNode.x+1,",",this.grid.state.currentNode.y+1,") Destination Node = (",this.grid.state.endNode.x+1,",",this.grid.state.endNode.y+1,") Number of Iterations = ",this.state.numberOfIterations,Object(i.jsx)("div",{children:Object(i.jsx)("div",{className:k.a.grid,children:s})})]})}}]),r}(s.Component),I=(r(41),function(){return Object(i.jsxs)("div",{className:"intro",children:[Object(i.jsx)("p",{children:"This project contains a visualization of the common algorithms that you will probably encounter in your CSE classes."}),Object(i.jsxs)("p",{children:[" This project has been written from scratch in React. (",Object(i.jsx)("a",{href:"https://reactjs.org/",children:"Learn React Here"}),")"]}),Object(i.jsx)("p",{children:" I have used the concept of stateful classes to visualize the PathFinding Algorithms - "}),Object(i.jsx)("br",{}),Object(i.jsxs)("ul",{children:[Object(i.jsx)("li",{children:" Depth First Search - Stack implementation"}),Object(i.jsx)("li",{children:" Breadth First Search - Queue implementation "}),Object(i.jsx)("li",{children:" Dijkstra (Uniform Cost Search) - Priority Queue implementation"}),Object(i.jsx)("li",{children:" A* - Priority Queue implementation "})]}),Object(i.jsx)("br",{}),Object(i.jsx)("p",{children:" These are the next visualization coming up in this order. "}),Object(i.jsxs)("ol",{children:[Object(i.jsx)("li",{children:" Sorting Algorithms "}),Object(i.jsxs)("li",{children:[" Trees. (I plan to use functional components and ",Object(i.jsx)("a",{href:"https://reactjs.org/docs/hooks-intro.html",children:"Hooks in React"})," to visualize the Trees.) "]}),Object(i.jsx)("li",{children:" Linked List "}),Object(i.jsx)("li",{children:" Hash Tables "})]})]})}),z=r.p+"static/media/workInProgress.c69af6f8.jpg",B=(r(42),function(){return Object(i.jsxs)("div",{className:"centered-div",children:[Object(i.jsx)("img",{src:z,alt:"Work In Progress"}),Object(i.jsxs)("p",{children:[" This page is currently in Production. If you want to checkout the code or would like to contribute, here is the ",Object(i.jsx)("a",{href:"https://github.com/satyam19946/visualizer/",children:"Github Link"})]})]})}),F=function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"black";Object(g.a)(this,e),this.value=t,this.color=r};function _(){for(var e=[],t=[],r=0;e.length<50;r++){var i=Math.floor(50*Math.random())+1;-1===t.indexOf(i)&&(e.push(new F(i)),t.push(i))}return e}function A(){var e=Object(s.useState)(_()),t=Object(d.a)(e,2),r=t[0],a=t[1],n=Object(s.useState)(),o=Object(d.a)(n,2),h=o[0],c=o[1],l=Object(s.useState)("Bubble Sort"),u=Object(d.a)(l,2),g=u[0],b=u[1],f=Object(s.useState)(!0),p=Object(d.a)(f,2),j=p[0],m=p[1],v=Object(s.useState)(void 0),O=Object(d.a)(v,2),x=O[0],k=O[1],y=Object(s.useRef)({i:0,j:0});function w(){var e=y.current,t=e.i,i=e.j,s=r.slice();if(i===s.length-t-1&&(i=0,t+=1),t<s.length&&i<s.length-1){if(s[i].color="blue",s[i+1].color="blue",s[i].value>s[i+1].value){var n=s[i].value;s[i].value=s[i+1].value,s[i+1].value=n}a(s),y.current={i:t,j:i+1}}}return Object(s.useEffect)((function(){var e=r.map((function(e){return Object(i.jsx)("div",{style:{backgroundColor:e.color,color:"white",marginBottom:3,marginRight:(70-e.value)*(window.innerWidth/100),height:9},children:j&&e.value},e.value)}));return c(e),function(){console.log(y)}}),[r,j]),Object(i.jsxs)("div",{children:[Object(i.jsxs)("p",{children:["This page is currently in Production. With Classes, I will update it soon but it will take some time. Please feel free to contribute to the github branch.",Object(i.jsx)("button",{children:Object(i.jsx)("a",{href:"https://github.com/satyam19946/visualizer",children:"Github link"})})]}),Object(i.jsx)("button",{style:{marginBottom:10},children:"Placeholder"}),Object(i.jsx)("button",{onClick:function(){return a(_())},children:"Initialize"}),Object(i.jsx)("button",{onClick:function(){return b("Bubble Sort")},children:"Bubble Sort"}),Object(i.jsx)("button",{onClick:function(){return b("Insertion Sort")},children:"Insertion Sort"}),Object(i.jsx)("button",{onClick:function(){return m(!j)},children:"Toggle Debug"}),Object(i.jsx)("button",{onClick:function(){return console.log("I am called"),void k(window.setInterval(w,10))},children:"Start Sort"}),Object(i.jsx)("button",{disabled:void 0===x,onClick:function(){return console.log(x),void(x&&(window.clearInterval(x),k(void 0)))},children:"Stop Sort"}),g,r.length,h]})}var R=function(){return console.log("From custom bar","".concat("/visualizer")),Object(i.jsxs)(l.a,{basename:"".concat("/visualizer","/"),children:[Object(i.jsxs)(h.a,{bg:"dark",variant:"dark",children:[Object(i.jsx)(h.a.Brand,{href:"".concat("/visualizer","/#/"),children:"Home"}),Object(i.jsxs)(c.a,{children:[Object(i.jsx)(c.a.Link,{href:"".concat("/visualizer","/#/Pathfinder"),children:"Pathfinder"}),Object(i.jsx)(c.a.Link,{href:"".concat("/visualizer","/#/Sorting"),children:"Sorting"}),Object(i.jsx)(c.a.Link,{href:"".concat("/visualizer","/#/Trees"),children:"Trees"}),Object(i.jsx)(c.a.Link,{href:"".concat("/visualizer","/#/Linkedlist"),children:"Linked List"}),Object(i.jsx)(c.a.Link,{href:"".concat("/visualizer","/#/Hashtables"),children:"Hash Tables"})]})]}),Object(i.jsxs)(u.c,{children:[Object(i.jsx)(u.a,{exact:!0,path:"/",component:I}),Object(i.jsx)(u.a,{exact:!0,path:"/Pathfinder",component:D}),Object(i.jsx)(u.a,{exact:!0,path:"/Sorting",component:A}),Object(i.jsx)(u.a,{exact:!0,path:"/Trees",component:B}),Object(i.jsx)(u.a,{exact:!0,path:"/LinkedList",component:B}),Object(i.jsx)(u.a,{exact:!0,path:"/Hashtables",component:B})]})]})};r(54);var P=function(){return Object(i.jsx)("div",{children:Object(i.jsx)(R,{})})};o.a.render(Object(i.jsx)(a.a.StrictMode,{children:Object(i.jsx)(P,{})}),document.getElementById("root"))}},[[55,1,2]]]);
//# sourceMappingURL=main.2b411ab4.chunk.js.map