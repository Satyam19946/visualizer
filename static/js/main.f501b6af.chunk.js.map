{"version":3,"sources":["PathFinding/SearchGrid.module.css","PathFinding/Algorithms.js","PathFinding/Node.js","PathFinding/SearchGrid.js","PathFinding/PriorityQueue.js","PathFinding/Description.js","PathFinding/Pathfinder.js","HomePage/Home.js","CustomNavbar/CustomNavbar.js","assets/workInProgress.jpg","WorkInProgressPage/WorkInProgress.js","App.js","index.js"],"names":["module","exports","Algorithms","item","color","grid","arrayOfNodes","visited","nodesTouched","currentIterations","destNode","endNode","currNode","currentNode","push","x","y","console","log","neighbors","i","length","check","numberOfRows","numberOfColumns","indexOf","graph","weight","Infinity","nodeToPush","parent","forEach","this","changeColorToOrange","changeColorToBlue","pop","shift","pqOfNodes","currentNodeWeight","size","peek","weightToDest","Math","abs","forEachNode","Component","Node","SearchGrid","props","state","startNode","newGraph","currRow","j","temp","update","bind","setState","PriorityQueue","comparator","a","b","_heap","_comparator","element","pushed","splice","callback","getDescription","algorithmName","HIGH_WEIGHTED_NODES_COLOR","LOW_WEIGHTED_NODES_COLOR","UNPASSABLE_NODES_COLOR","NO_WEIGHT_NODES_COLOR","Pathfinder","algorithm","searching","numberOfIterations","intervalID","undefined","searchAlgos","description","changeToDijkstra","changeToBfs","changeToDfs","changeToAstar","startSearch","stopSearch","search","startInterval","stopInterval","reset","changeDescription","randomizeMaze","weightToAssign","random","workingNode","newGrid","newarrayOfNodes","newVisited","newNodesTouched","continueSearch","newPqOfNodes","newIterations","dfsStep","bfsStep","aStarStep","dijkstraStep","tracePathFromStartToEnd","window","setInterval","clearInterval","stopSearchButton","startSearchButton","onClick","disabled","gridRender","map","style","backgroundColor","className","styles","href","Description","homePage","createdNavbar","Navbar","basename","process","bg","variant","Brand","Nav","Link","WorkInProgressPage","src","wipImage","alt","App","exact","path","component","HomePage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f501b6af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"SearchGrid_grid__3LqTd\",\"Node\":\"SearchGrid_Node__2S4hf\",\"Description\":\"SearchGrid_Description__6iyT7\"};","import {Component} from 'react';\r\n\r\n// Algorithms takes an algorithm name from PathFinder and the Grid from SearchGrid to execute the specified the algorithm\r\nclass Algorithms extends Component{\r\n    \r\n\r\n    changeColorToOrange(item){\r\n        item.color = 'orange';\r\n    }\r\n\r\n    changeColorToBlue(item){\r\n        item.color = 'blue';\r\n    }\r\n    \r\n    dfsStep(grid, arrayOfNodes, visited, nodesTouched, currentIterations){\r\n        let destNode = grid.endNode;\r\n        let currNode = grid.currentNode;\r\n\r\n        visited.push(currNode);\r\n\r\n        if ( currNode.x === destNode.x && currNode.y === destNode.y ){\r\n            grid.endNode.color = 'pink';\r\n            console.log(\"Node found\");\r\n            return [grid, arrayOfNodes, visited, nodesTouched, currentIterations+1];\r\n        }\r\n\r\n        let neighbors = [];\r\n        // Add the 4 neighbors.\r\n        neighbors.push([currNode.x+1, currNode.y]);\r\n        neighbors.push([currNode.x-1, currNode.y]);\r\n        neighbors.push([currNode.x, currNode.y+1]);\r\n        neighbors.push([currNode.x, currNode.y-1]);\r\n        for ( let i = 0; i < neighbors.length; i++ ){\r\n            let check = neighbors[i];\r\n            if ( check[0] >= 0 && check[0] < grid.numberOfRows && check[1] >= 0 && check[1] < grid.numberOfColumns ){\r\n                if ( nodesTouched.indexOf(check[0]*grid.numberOfColumns + check[1]) === -1 && grid.graph[check[0]][check[1]].weight !== Infinity){\r\n                    let nodeToPush = grid.graph[check[0]][check[1]];\r\n                    nodeToPush.parent = currNode;\r\n                    arrayOfNodes.push(nodeToPush);\r\n                    nodesTouched.push(check[0]*grid.numberOfColumns + check[1]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        arrayOfNodes.forEach(this.changeColorToOrange);\r\n        visited.forEach(this.changeColorToBlue);\r\n        if ( arrayOfNodes.length >= 1 ){\r\n            grid.currentNode = arrayOfNodes.pop();\r\n            grid.currentNode.color = 'green';\r\n        }\r\n\r\n        return [grid, arrayOfNodes, visited, nodesTouched, currentIterations+1];\r\n    }\r\n\r\n    bfsStep(grid, arrayOfNodes, visited, nodesTouched, currentIterations){\r\n        let destNode = grid.endNode;\r\n        let currNode = grid.currentNode;\r\n\r\n        visited.push(currNode);\r\n\r\n        if ( currNode.x === destNode.x && currNode.y === destNode.y ){\r\n            grid.endNode.color = 'pink';\r\n            return [grid, arrayOfNodes, visited, nodesTouched, currentIterations+1];\r\n        }\r\n\r\n        let neighbors = [];\r\n        // Add the 4 neighbors.\r\n        neighbors.push([currNode.x+1, currNode.y]);\r\n        neighbors.push([currNode.x-1, currNode.y]);\r\n        neighbors.push([currNode.x, currNode.y+1]);\r\n        neighbors.push([currNode.x, currNode.y-1]);\r\n        for ( let i = 0; i < neighbors.length; i++ ){\r\n            let check = neighbors[i];\r\n            if ( check[0] >= 0 && check[0] < grid.numberOfRows && check[1] >= 0 && check[1] < grid.numberOfColumns ){\r\n                if ( nodesTouched.indexOf(check[0]*grid.numberOfColumns + check[1]) === -1 && grid.graph[check[0]][check[1]].weight !== Infinity){\r\n                    let nodeToPush = grid.graph[check[0]][check[1]];\r\n                    nodeToPush.parent = currNode;\r\n                    arrayOfNodes.push(nodeToPush);\r\n                    nodesTouched.push(check[0]*grid.numberOfColumns + check[1]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        arrayOfNodes.forEach(this.changeColorToOrange);\r\n        visited.forEach(this.changeColorToBlue);\r\n        if ( arrayOfNodes.length >= 1 ){\r\n            grid.currentNode = arrayOfNodes.shift();\r\n            grid.currentNode.color = 'green';\r\n        }\r\n\r\n        return [grid, arrayOfNodes, visited, nodesTouched, currentIterations+1];\r\n    }\r\n\r\n    aStarStep(grid, pqOfNodes, visited, nodesTouched, currentIterations){\r\n        let destNode = grid.endNode;\r\n        let currNode = grid.currentNode;\r\n        let currentNodeWeight = 1;\r\n\r\n        if ( pqOfNodes.size() ){\r\n            currentNodeWeight = pqOfNodes.peek()[2];\r\n        }\r\n\r\n        visited.push(currNode);\r\n\r\n        if ( currNode.x === destNode.x && currNode.y === destNode.y ){\r\n            grid.endNode.color = 'pink';\r\n            return [grid, pqOfNodes, visited, nodesTouched, currentIterations+1];\r\n        }\r\n\r\n        let neighbors = [];\r\n        // Add the 4 neighbors.\r\n        neighbors.push([currNode.x+1, currNode.y]);\r\n        neighbors.push([currNode.x-1, currNode.y]);\r\n        neighbors.push([currNode.x, currNode.y+1]);\r\n        neighbors.push([currNode.x, currNode.y-1]);\r\n        for ( let i = 0; i < neighbors.length; i++ ){\r\n            let check = neighbors[i];\r\n            if ( check[0] >= 0 && check[0] < grid.numberOfRows && check[1] >= 0 && check[1] < grid.numberOfColumns ){\r\n                if ( nodesTouched.indexOf(check[0]*grid.numberOfColumns + check[1]) === -1 && grid.graph[check[0]][check[1]].weight !== Infinity ){\r\n                    let nodeToPush = grid.graph[check[0]][check[1]];\r\n                    nodeToPush.parent = currNode;\r\n                    var weightToDest = Math.abs(nodeToPush.x - destNode.x) + Math.abs(nodeToPush.y - destNode.y);\r\n                    pqOfNodes.push([nodeToPush, currentNodeWeight+nodeToPush.weight+weightToDest, currentNodeWeight+nodeToPush.weight]);\r\n                    nodesTouched.push(check[0]*grid.numberOfColumns + check[1]);\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        pqOfNodes.forEachNode(this.changeColorToOrange);\r\n        visited.forEach(this.changeColorToBlue);\r\n        if ( pqOfNodes.size() ){\r\n            grid.currentNode = pqOfNodes.pop()[0];\r\n            grid.currentNode.color = 'green';\r\n        }\r\n\r\n        return [grid, pqOfNodes, visited, nodesTouched, currentIterations+1];\r\n    }\r\n    \r\n    // Only difference between A* and Dijkstra is that there is no weightToDestination (heuristics) included.\r\n    dijkstraStep(grid, pqOfNodes, visited, nodesTouched, currentIterations){\r\n        let destNode = grid.endNode;\r\n        let currNode = grid.currentNode;\r\n        let currentNodeWeight = 1;\r\n\r\n        if ( pqOfNodes.size() ){\r\n            currentNodeWeight = pqOfNodes.peek()[1];\r\n        }\r\n\r\n        visited.push(currNode);\r\n\r\n        if ( currNode.x === destNode.x && currNode.y === destNode.y ){\r\n            grid.endNode.color = 'pink';\r\n            return [grid, pqOfNodes, visited, nodesTouched, currentIterations+1];\r\n        }\r\n\r\n        let neighbors = [];\r\n        // Add the 4 neighbors.\r\n        neighbors.push([currNode.x+1, currNode.y]);\r\n        neighbors.push([currNode.x-1, currNode.y]);\r\n        neighbors.push([currNode.x, currNode.y+1]);\r\n        neighbors.push([currNode.x, currNode.y-1]);\r\n        for ( let i = 0; i < neighbors.length; i++ ){\r\n            let check = neighbors[i];\r\n            if ( check[0] >= 0 && check[0] < grid.numberOfRows && check[1] >= 0 && check[1] < grid.numberOfColumns ){\r\n                if ( nodesTouched.indexOf(check[0]*grid.numberOfColumns + check[1]) === -1 && grid.graph[check[0]][check[1]].weight !== Infinity ){\r\n                    let nodeToPush = grid.graph[check[0]][check[1]];\r\n                    nodeToPush.parent = currNode;\r\n                    pqOfNodes.push([nodeToPush, currentNodeWeight+nodeToPush.weight]);\r\n                    nodesTouched.push(check[0]*grid.numberOfColumns + check[1]);\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        pqOfNodes.forEachNode(this.changeColorToOrange);\r\n        visited.forEach(this.changeColorToBlue);\r\n        if ( pqOfNodes.size() ){\r\n            grid.currentNode = pqOfNodes.pop()[0];\r\n            grid.currentNode.color = 'green';\r\n        }\r\n\r\n        return [grid, pqOfNodes, visited, nodesTouched, currentIterations+1];\r\n    }\r\n}\r\n\r\nexport default Algorithms;","// Each node is a point in the graph\r\nclass Node {\r\n    constructor(x,y,color=\"white\", weight=1){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n        this.parent = null;\r\n        this.weight = 1;\r\n    }\r\n\r\n    getX(){\r\n        return this.x;\r\n    }\r\n\r\n    getY(){\r\n        return this.y;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    getParent(){\r\n        return this.parent;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    setParent(parent){\r\n        this.parent = parent;\r\n    }\r\n}\r\n\r\nexport default Node","import {Component} from 'react';\r\nimport Node from \"./Node.js\";\r\n\r\n\r\n// This class contains the graph array which is manipulated by\r\n// the algorithms based on which algorithm we are using\r\n// resetBoard() - Resets the board to the initial conditions.\r\n// displayBoard() - Displays the board using SearchGrid.css\r\nclass SearchGrid extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            numberOfRows: 20,\r\n            numberOfColumns: 45,\r\n            graph: [[]],\r\n            startNode: new Node(0,0, 'yellow'),\r\n            currentNode: new Node(0,0, 'green'),\r\n            endNode: new Node(0,0,'red'),\r\n        }\r\n\r\n        let newGraph = [];\r\n        for(let i = 0; i < this.state.numberOfRows; i++ ){\r\n            let currRow = []\r\n            for (let j = 0; j < this.state.numberOfColumns; j++ ){\r\n                let temp = new Node(i,j);\r\n                currRow.push(temp);\r\n            }\r\n            newGraph.push(currRow);\r\n        }\r\n\r\n        newGraph[0][0].color = 'yellow';\r\n        newGraph[this.state.numberOfRows-1][this.state.numberOfColumns-1].color = 'red';\r\n\r\n        this.state.graph = newGraph;\r\n        this.state.startNode = newGraph[0][0];\r\n        this.state.endNode = newGraph[this.state.numberOfRows-1][this.state.numberOfColumns-1];\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    // Resets the board to the initial state.\r\n    update(grid){\r\n        console.log(\"UPDATING THE GRID\");\r\n        this.setState(grid);\r\n    }\r\n}\r\n\r\nexport default SearchGrid;","// Priority queue implemented using min-heap for A* and other weighted algorithms\r\n// heap contains elements like (data, weight) .\r\nclass PriorityQueue {\r\n    constructor(comparator = (a,b) => a > b) {\r\n        this._heap = [];\r\n        this._comparator = comparator;\r\n    }\r\n\r\n    heap(){\r\n        return this._heap;\r\n    }\r\n\r\n    size(){\r\n        return this._heap.length;\r\n    }\r\n\r\n    isEmpty(){\r\n        return this._heap.length === 0;\r\n    }\r\n\r\n    peek(){\r\n        if ( this._heap.length >= 1) {\r\n            return (this._heap[0]);\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // O(n) insertion (try doing with tree and maybe reach O(log n))\r\n    push(element){\r\n        var pushed = false;\r\n\r\n        for ( var i = 0; i < this._heap.length && !pushed; i++ ){\r\n            if ( this._heap[i][1] > element[1] ){\r\n                this._heap.splice(i, 0, element);\r\n                pushed = true;\r\n            }\r\n        }\r\n\r\n        if ( !pushed ){\r\n            this._heap.splice(this._heap.length, 0, element);\r\n        }\r\n    }\r\n\r\n    // O(1)\r\n    pop(){\r\n        if ( this._heap.length > 0 ){\r\n            return this._heap.shift();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    empty(){\r\n        this._heap = [];\r\n    }\r\n\r\n    forEachNode(callback){\r\n        for ( var i = 0; i < this.size(); i++ ){\r\n            callback(this._heap[i][0]);\r\n        }\r\n    }\r\n};\r\n\r\nexport default PriorityQueue;","const DFSDescription = \"Depth-First Search or DFS is a classic Path-finding Algorithm. It does not guarantee a shortest path but it guarantees that if there exists a path from the starting node to the destination, it will find it. It uses a stack in its implementation and is very useful for tree-traversals (pre/in/post) where we need to go down one entire branch before switching to the different branch. The last node that is added, is explored first in this algorithm. Both BFS and DFS do not work for weighted graphs, so we assume that every node has the same weight and that is 1.\"\r\nconst DijkstraDescription = \"Dijkstra is a guaranteed path finder and it finds the path with the lowest cost. A major difference between BFS/DFS and Dijkstra is that Dijkstra works for weighted paths where the cost of all nodes is not the same. Dijkstra's algorithm is named after Edsger W. Dijkstra. Using a Priority Queue in its implementation, we can find the lowest cost path from one node to all the other nodes, as a priority queue would search the nodes with the smallest cost first. In my implementation, I use min-heap to implement the priority queue.\";\r\nconst BFSDescription = \"Breadth-First Search or BFS is a guaranteed shortest path-finder in a graph where all nodes cost the same to visit. It uses a queue in its implementation. We first visit and explore all the nodes at one level and then go upto the upper level. Since all nodes have the same cost, it can be proved using induction that all the nodes at each level have the same cost. This algorithm is used in Tree-traversals when we want to search an entire level of tree before going down to the second level. This traversal is known as level-order traversal.\"\r\nconst AstarDescription = \"A* works like Dijkstra but uses the concept of a heuristics. A heuristics is a well-defined function which gives us an estimate of how bad/good visiting the current path might be. In this case, we use the \\\"Manhattan Distance\\\" between the current node and the destination to get an estimate of how good we are doing. The heuristics should be consistent for all the nodes and should not result in a decreased cost. (Manhattan distance fulfills both the conditions and is an extremely popular heuristics.\"\r\n\r\n// const DFSAlgorithm = \"Pseudocode: stack = [stackNode]\"\r\n\r\nconst getDescription = (algorithmName) => {\r\n    if ( algorithmName === \"DFS\" ){\r\n        return DFSDescription;\r\n    } else if ( algorithmName === \"Dijkstra\" ){\r\n        return DijkstraDescription;\r\n    } else if ( algorithmName === \"BFS\" ){\r\n        return BFSDescription;\r\n    } else {\r\n        return AstarDescription;\r\n    }\r\n}\r\n\r\nexport default getDescription;","import React, {Component} from 'react';\r\nimport Algorithms from './Algorithms.js';\r\nimport SearchGrid from './SearchGrid.js';\r\nimport styles from \"./SearchGrid.module.css\";\r\nimport PriorityQueue from \"./PriorityQueue.js\";\r\nimport getDescription from \"./Description.js\";\r\n\r\nconst HIGH_WEIGHTED_NODES_WEIGHT = 70;\r\nconst LOW_WEIGHTED_NODES_WEIGHT = 30;\r\nconst HIGH_WEIGHTED_NODES_COLOR = \"gray\";\r\nconst LOW_WEIGHTED_NODES_COLOR = \"lightgray\";\r\nconst UNPASSABLE_NODES_COLOR = \"black\";\r\nconst NO_WEIGHT_NODES_COLOR = \"white\";\r\nconst LEGEND = \"Black Nodes cannot be passed and act as blockers. Darker nodes are high weighted while lighter are low weighted. 'Randomize The Maze' randomly assigns each the weight to each node in the grid.\"\r\n\r\n\r\n// Pathfinder tells which algorithm we are using.\r\nclass Pathfinder extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            algorithm: \"Dijkstra\",\r\n            searching: false,\r\n            arrayOfNodes: [],\r\n            visited: [],\r\n            nodesTouched: [],\r\n            pqOfNodes: new PriorityQueue(),\r\n            numberOfIterations: 0,\r\n        };\r\n\r\n        this.grid = new SearchGrid();\r\n        this.intervalID = undefined;\r\n        this.searchAlgos = new Algorithms();\r\n        this.description = getDescription(this.state.algorithm);\r\n\r\n        this.changeToDijkstra = this.changeToDijkstra.bind(this);\r\n        this.changeToBfs = this.changeToBfs.bind(this);\r\n        this.changeToDfs = this.changeToDfs.bind(this);\r\n        this.changeToAstar = this.changeToAstar.bind(this);\r\n        this.startSearch = this.startSearch.bind(this);\r\n        this.stopSearch = this.stopSearch.bind(this);\r\n        this.search = this.search.bind(this);\r\n        this.startInterval = this.startInterval.bind(this);\r\n        this.stopInterval = this.stopInterval.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.changeDescription = this.changeDescription.bind(this);\r\n        this.randomizeMaze = this.randomizeMaze.bind(this);\r\n        this.randomizeMaze();\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            searching: false,\r\n            arrayOfNodes: [],\r\n            visited: [],\r\n            nodesTouched: [],\r\n            pqOfNodes: new PriorityQueue(),\r\n            numberOfIterations: 0,\r\n        });\r\n        \r\n\r\n        for(let i = 0; i < this.grid.state.numberOfRows; i++ ){\r\n            for ( let j = 0; j < this.grid.state.numberOfColumns; j++ ){\r\n                if ( this.grid.state.graph[i][j].weight === 1 ){\r\n                    this.grid.state.graph[i][j].color = NO_WEIGHT_NODES_COLOR;\r\n                } else if ( this.grid.state.graph[i][j].weight === HIGH_WEIGHTED_NODES_WEIGHT ){\r\n                    this.grid.state.graph[i][j].color = HIGH_WEIGHTED_NODES_COLOR;\r\n                    if (this.state.algorithm === \"BFS\" || this.state.algorithm === \"DFS\") {\r\n                        this.grid.state.graph[i][j].color = NO_WEIGHT_NODES_COLOR;\r\n                    }  \r\n                } else if ( this.grid.state.graph[i][j].weight === LOW_WEIGHTED_NODES_WEIGHT ){\r\n                    this.grid.state.graph[i][j].color = LOW_WEIGHTED_NODES_COLOR;\r\n                    if (this.state.algorithm === \"BFS\" || this.state.algorithm === \"DFS\") {\r\n                        this.grid.state.graph[i][j].color = NO_WEIGHT_NODES_COLOR;\r\n                    }  \r\n                }\r\n                 else if ( this.grid.state.graph[i][j].weight === Infinity ){\r\n                    this.grid.state.graph[i][j].color = 'black';\r\n                }\r\n            }\r\n        }\r\n\r\n        this.grid.state.graph[0][0].color = 'yellow';\r\n        this.grid.state.graph[0][0].weight = 1;\r\n        this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1].color = \"red\";\r\n        this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1].weight = 1;\r\n        this.grid.state.currentNode = this.grid.state.graph[0][0];\r\n        this.grid.state.startNode = this.grid.state.graph[0][0];\r\n        this.grid.state.endNode = this.grid.state.graph[this.grid.state.numberOfRows-1][this.grid.state.numberOfColumns-1];\r\n        this.grid.update(this.grid.state);\r\n        this.changeDescription();\r\n    }\r\n\r\n    randomizeMaze() {\r\n        for(let i = 0; i < this.grid.state.numberOfRows; i++ ){\r\n            for ( let j = 0; j < this.grid.state.numberOfColumns; j++ ){\r\n                if ( this.state.algorithm === \"Dijkstra\" || this.state.algorithm === \"A*\" ){\r\n                    let weightToAssign = Math.random();\r\n                    if ( weightToAssign > 0.9 ){\r\n                        this.grid.state.graph[i][j].weight = Infinity;\r\n                        this.grid.state.graph[i][j].color = UNPASSABLE_NODES_COLOR;\r\n                    } else if ( weightToAssign > 0.6 ) {\r\n                        this.grid.state.graph[i][j].weight = HIGH_WEIGHTED_NODES_WEIGHT;\r\n                        this.grid.state.graph[i][j].color = HIGH_WEIGHTED_NODES_COLOR;\r\n                    } else if ( weightToAssign > 0.3 ) {\r\n                        this.grid.state.graph[i][j].weight = LOW_WEIGHTED_NODES_WEIGHT;\r\n                        this.grid.state.graph[i][j].color = LOW_WEIGHTED_NODES_COLOR;\r\n                    } else {\r\n                        this.grid.state.graph[i][j].weight = 1;\r\n                    }\r\n                } else {\r\n                    let weightToAssign = Math.random();\r\n                    if ( weightToAssign > 0.8 ){\r\n                        this.grid.state.graph[i][j].weight = Infinity;\r\n                        this.grid.state.graph[i][j].color = UNPASSABLE_NODES_COLOR;\r\n                    } else {\r\n                        this.grid.state.graph[i][j].weight = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.reset();\r\n    }\r\n    changeDescription(){\r\n        this.description = getDescription(this.state.algorithm);\r\n    }\r\n\r\n    changeToDijkstra() {\r\n        this.setState({\r\n            algorithm: \"Dijkstra\"\r\n        }, () => this.reset()\r\n        );\r\n    }\r\n\r\n    changeToBfs() {\r\n        this.setState({\r\n            algorithm: \"BFS\"\r\n        }, () => this.reset()\r\n        );\r\n    }\r\n\r\n    changeToDfs() {\r\n        this.setState({\r\n            algorithm: \"DFS\",\r\n        }, () => this.reset()\r\n        );\r\n    }\r\n\r\n    changeToAstar(){\r\n        this.setState({\r\n            algorithm: \"A*\",\r\n        }, ()=> this.reset()\r\n        );\r\n    }\r\n    \r\n    tracePathFromStartToEnd(grid){\r\n        var workingNode = grid.endNode;\r\n        while ( workingNode.x !== grid.startNode.x || workingNode.y !== grid.startNode.y ){\r\n            workingNode.color = \"yellow\";\r\n            workingNode = workingNode.parent;           \r\n        }\r\n        workingNode.color = \"yellow\";\r\n        return grid;\r\n    }\r\n\r\n    search(){\r\n        if ( this.state.searching ){\r\n            var newGrid, newarrayOfNodes, newVisited, newNodesTouched, continueSearch, newPqOfNodes, newIterations;\r\n            if ( this.state.algorithm === 'DFS' ){\r\n                [newGrid, newarrayOfNodes, newVisited, newNodesTouched, newIterations] = this.searchAlgos.dfsStep(\r\n                    this.grid.state,\r\n                    this.state.arrayOfNodes,\r\n                    this.state.visited,\r\n                    this.state.nodesTouched,\r\n                    this.state.numberOfIterations,            \r\n                );\r\n                this.setState({\r\n                    arrayOfNodes: newarrayOfNodes,\r\n                    visited: newVisited,\r\n                    nodesTouched: newNodesTouched,\r\n                    numberOfIterations: newIterations,\r\n                });\r\n\r\n            } else if ( this.state.algorithm === 'BFS' ){\r\n                [newGrid, newarrayOfNodes, newVisited, newNodesTouched, newIterations] = this.searchAlgos.bfsStep(\r\n                    this.grid.state,\r\n                    this.state.arrayOfNodes,\r\n                    this.state.visited,\r\n                    this.state.nodesTouched,\r\n                    this.state.numberOfIterations,\r\n                );\r\n\r\n                this.setState({\r\n                    arrayOfNodes: newarrayOfNodes,\r\n                    visited: newVisited,\r\n                    nodesTouched: newNodesTouched,\r\n                    numberOfIterations: newIterations,\r\n                });\r\n\r\n            } else if ( this.state.algorithm === \"A*\" ){\r\n                [newGrid, newPqOfNodes, newVisited, newNodesTouched, newIterations] = this.searchAlgos.aStarStep(\r\n                    this.grid.state,\r\n                    this.state.pqOfNodes,\r\n                    this.state.visited,\r\n                    this.state.nodesTouched,\r\n                    this.state.numberOfIterations,            \r\n                );\r\n\r\n                this.setState({\r\n                    pqOfNodes: newPqOfNodes,\r\n                    visited: newVisited,\r\n                    nodesTouched: newNodesTouched,\r\n                    numberOfIterations: newIterations,\r\n                });\r\n            } else if ( this.state.algorithm === \"Dijkstra\" ){\r\n                [newGrid, newPqOfNodes, newVisited, newNodesTouched, newIterations] = this.searchAlgos.dijkstraStep(\r\n                    this.grid.state,\r\n                    this.state.pqOfNodes,\r\n                    this.state.visited,\r\n                    this.state.nodesTouched,\r\n                    this.state.numberOfIterations,            \r\n                );\r\n\r\n                this.setState({\r\n                    pqOfNodes: newPqOfNodes,\r\n                    visited: newVisited,\r\n                    nodesTouched: newNodesTouched,\r\n                    numberOfIterations: newIterations,\r\n                });\r\n            }\r\n\r\n            if ( newGrid.currentNode.x === this.grid.state.endNode.x && newGrid.currentNode.y === this.grid.state.endNode.y ){\r\n                continueSearch = false;\r\n                newGrid = this.tracePathFromStartToEnd(newGrid);\r\n            } else {\r\n                continueSearch = true;\r\n            }\r\n            \r\n            this.setState({\r\n                searching: continueSearch,\r\n            })\r\n            this.grid.update(newGrid);\r\n        }\r\n    }\r\n\r\n    startInterval(){\r\n        this.intervalID = window.setInterval(this.search, 10);\r\n    }\r\n\r\n    stopInterval(){\r\n        window.clearInterval(this.intervalID);\r\n    }\r\n\r\n    startSearch() {\r\n        this.setState({\r\n            searching: true,\r\n        }, () => this.startInterval(),\r\n        );\r\n    }\r\n\r\n    stopSearch() {\r\n        this.setState({\r\n            searching: false,\r\n        }, () => this.stopInterval(),\r\n        );\r\n    }\r\n\r\n    render(){\r\n        let stopSearchButton, startSearchButton;\r\n        if ( this.state.searching ){\r\n            stopSearchButton = <button onClick={this.stopSearch}>Stop Search</button>\r\n        } else {\r\n            stopSearchButton = <button onClick={this.stopSearch} disabled>Stop Search</button>\r\n        }\r\n        if ( this.state.searching ){\r\n            startSearchButton = <button onClick={this.startSearch} disabled>Start Search</button>\r\n        } else {\r\n            startSearchButton = <button onClick={this.startSearch}>Start Search</button>\r\n        }\r\n        const gridRender = this.grid.state.graph.map(\r\n            i => i.map(\r\n                j => \r\n                <div key={j.x*this.grid.state.numberOfColumns + j.y} style={{backgroundColor: j.color}} className={styles.Node}>\r\n                </div>\r\n            )\r\n        );\r\n        \r\n        return (\r\n            <div>\r\n                <button onClick={this.changeToDijkstra} disabled={this.state.algorithm === \"Dijkstra\"}>Dijkstra</button>\r\n                <button onClick={this.changeToBfs} disabled={this.state.algorithm === \"BFS\"}>BFS</button>\r\n                <button onClick={this.changeToDfs} disabled={this.state.algorithm === \"DFS\"}>DFS</button>\r\n                <button onClick={this.changeToAstar} disabled={this.state.algorithm === \"A*\"}>A*</button>\r\n                <button onClick={this.reset}>Reset The Board</button>\r\n                <button onClick={this.randomizeMaze}>Randomize The Maze</button>\r\n                {startSearchButton}\r\n                {stopSearchButton}\r\n                <button><a href=\"https://github.com/satyam19946/visualizer\">Github link</a></button>\r\n                <div className={styles.Description}>{this.description}</div>\r\n                <br />\r\n                {LEGEND}\r\n                <br />\r\n                Current Node = ({this.grid.state.currentNode.x+1},{this.grid.state.currentNode.y+1}) Destination Node = ({this.grid.state.endNode.x+1},{this.grid.state.endNode.y+1}) Number of Iterations = {this.state.numberOfIterations}\r\n                <div>\r\n                    <div className={styles.grid}>{gridRender}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pathfinder;","import \"./Home.css\";\r\n\r\nconst homePage = () => {\r\n  return (\r\n    <div className=\"intro\"> \r\n      <p>This project contains a visualization of the common algorithms that you will probably encounter in your CSE classes.</p>\r\n      <p> This project has been written from scratch in React. (<a href=\"https://reactjs.org/\">Learn React Here</a>)</p>\r\n      <p> I have used the concept of stateful classes to visualize the PathFinding Algorithms -\r\n        <br />\r\n        <ul>\r\n          <li> Depth First Search - Stack implementation</li>\r\n          <li> Breadth First Search - Queue implementation </li>\r\n          <li> Dijkstra (Uniform Cost Search) - Priority Queue implementation</li>\r\n          <li> A* - Priority Queue implementation </li>\r\n        </ul>\r\n      </p>\r\n      <br />\r\n      <p> These are the next visualization coming up in this order. </p>\r\n      <ol>\r\n        <li> Trees. (I plan to use functional components and <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks in React</a> to visualize the Trees.) </li>\r\n        <li> Linked List </li>\r\n        <li> Sorting Algorithms </li>\r\n        <li> Hash Tables </li>\r\n      </ol>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default homePage;","import Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport \"./CustomNavbar.css\";\r\n\r\nconst createdNavbar = () => {\r\n\r\n  return (\r\n    <>\r\n      <Navbar basename={`${process.env.PUBLIC_URL}`} bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">Home</Navbar.Brand>\r\n        <Nav>\r\n          <Nav.Link href=\"/Pathfinder\">Pathfinder</Nav.Link>\r\n          <Nav.Link href=\"/Trees\">Trees</Nav.Link>\r\n          <Nav.Link href=\"/LinkedList\">Linked List</Nav.Link>\r\n          <Nav.Link href=\"/Sorting\">Sorting</Nav.Link>\r\n          <Nav.Link href=\"/Hashtables\">Hash Tables</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n    </>\r\n  );\r\n} \r\n\r\nexport default createdNavbar;","export default __webpack_public_path__ + \"static/media/workInProgress.c69af6f8.jpg\";","import wipImage from \"../assets/workInProgress.jpg\";\r\nimport \"./WorkInProgress.css\";\r\n\r\nconst WorkInProgressPage = () => {\r\n  return (\r\n    <div className=\"centered-div\">\r\n      <img src={wipImage} alt=\"Work In Progress\" />\r\n      <p> This page is currently in Production. If you want to checkout the code or would like to contribute, here is the <a href=\"https://github.com/satyam19946/visualizer/\">Github Link</a></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkInProgressPage;","import './App.css';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport Pathfinder from './PathFinding/Pathfinder.js';\r\nimport HomePage from './HomePage/Home.js';\r\nimport Navbar from \"./CustomNavbar/CustomNavbar.js\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport WorkInProgressPage from \"./WorkInProgressPage/WorkInProgress.js\";\r\n\r\n<link\r\n  rel=\"stylesheet\"\r\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n  crossorigin=\"anonymous\"\r\n/>\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <BrowserRouter basename={`${process.env.PUBLIC_URL}/`}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route exact path=\"/Pathfinder\" component={Pathfinder}/>\r\n          <Route exact path=\"/Trees\" component={WorkInProgressPage} />\r\n          <Route exact path=\"/LinkedList\" component={WorkInProgressPage} />\r\n          <Route exact path=\"/Sorting\" component={WorkInProgressPage} />\r\n          <Route exact path=\"/Hashtables\" component={WorkInProgressPage} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}